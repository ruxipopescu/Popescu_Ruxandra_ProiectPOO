/*
FAZA 4
#include<iostream>
#include<vector>
using namespace std;

class Angajat {
private:
    const int salariu; //atribut constant 
	string nume; //atribut normal
	int varsta; //atribut normal
	static int zileConcediu; //atribut static
	char* tip; // valoare alocata in HEAP

public:
	// constructor implicit
    Angajat():salariu(3000){
        this->nume = "Gigel";
        this->varsta = 29;
        this->tip = new char('M');
    }	
	
	// constructor cu parametrii
	Angajat(int salariu, string nume, int varsta, char tip):salariu(salariu){
	    this->nume = nume;
	    this->varsta = varsta;
	    this->tip = new char(tip);
	}

	// constructor cu parametrii din care unul este static
	Angajat(int salariu, string nume, int varsta):salariu(salariu){
	    this->nume = nume;
	    this->varsta = varsta;
	    this->tip = new char('M');
	}
	
	// constructor de copiere
	Angajat(const Angajat&a):salariu(a.salariu){
	    this->nume = a.nume;
	    this->varsta = a.varsta;
	    this->tip = new char();
	    this->tip = a.tip;
	}

    const Angajat& operator= (const Angajat&a) {
        if (this != &a) {
            if (this->tip != NULL)
                delete this->tip;
            this->nume = a.nume;
    	    this->varsta = a.varsta;
    	    this->tip = new char();
    	    this->tip = a.tip;
        }
        return *this;
    }
    
    Angajat operator+ (Angajat&a) {
        Angajat temp = *this;
        temp.nume = temp.nume + "_" + a.nume;
        return temp;
    }
    
    void operator+= (Angajat&a) {
        this->varsta += a.varsta;
    }

    Angajat operator- (Angajat&a) {
        Angajat temp = *this;
        temp.varsta = temp.varsta - a.varsta;
        return temp;
    }

    ~Angajat(){
        if (this->tip != NULL) {
            delete this->tip;
        }
    }
	
	//get-eri
	int getSalariu(){
	    return this->salariu;
	}
	string getNume(){
	    return this->nume;
	}
	int getVarsta(){
	    return this->varsta;
	}
	char* getTip(){
	    return this->tip;
	}
	static int getZileConcediu(){
	    return Angajat::zileConcediu;
	}
	
	//set-eri
	void setNume(string nume){
	    this->nume = nume;
	}
	void setVarsta(int varsta){
	    this->varsta = varsta;
	}
	void setTip(char* tip){
	    this->tip = tip;
	}
	static void setZileDeConcediu(int zileConcediu){
	    Angajat::zileConcediu = zileConcediu;
	}
	
	// functie de afisare 
	void afisare(){
	    cout<<"Angajatul "<<this->nume<<" are salariul "<<this->salariu<<"lei, varsta de "<<this->varsta<<" ani si este de tip "<<*this->tip<<endl;
	}
	
	friend string getResponse(int a, int threshold);
};

class Departament {
private:
    //atribut constant 
    const string nume;
	//atribut normal
	int anInfiintare;
	int nrAngajati;
	//atribut static
	static string sediu;
	//pointer cu spatiu in HEAP
	float* nrDep;
	
public:
	// constructor implicit
    Departament():nume("AHM"){
        anInfiintare = 1980;
        nrAngajati = 100;
        nrDep = new float(22.1);
    }	
    
	// constructor cu parametrii
	Departament(string nume, int anInfiintare, int nrAngajati, float nrDep):nume(nume){
	    this->anInfiintare = anInfiintare;
	    this->nrAngajati = nrAngajati;
	    this->nrDep = new float(nrDep);
	}

	// constructor cu parametrii din care unul este static
	Departament(string nume, int nrAngajati, float nrDep):nume(nume){
	    this->anInfiintare = 2010;
	    this->nrAngajati = nrAngajati;
	    this->nrDep = new float(nrDep);
	}
	
	// constructor de copiere
	Departament(const Departament&d):nume(d.nume){
	    this->anInfiintare = d.anInfiintare;
	    this->nrAngajati = d.nrAngajati;
	    this->nrDep = new float();
	    this->nrDep = d.nrDep;
	}

	const Departament& operator= (const Departament&d) {
        if (this != &d) {
            if (this->nrDep != NULL)
                delete this->nrDep;
            this->anInfiintare = d.anInfiintare;
    	    this->nrAngajati = d.nrAngajati;
    	    this->nrDep = new float();
    	    this->nrDep = d.nrDep;
        }
        return *this;
    }
    
    Departament operator* (Departament&a) {
        Departament temp = *this;
        *temp.nrDep = *temp.nrDep * (*a.nrDep);
        return temp;
    }
    
    void operator-= (Departament&a) {
        this->nrAngajati -= a.nrAngajati;
    }

    Departament operator/ (Departament&a) {
        Departament temp = *this;
        temp.anInfiintare = temp.anInfiintare / a.anInfiintare;
        return temp;
    }
	
	~Departament(){
        if (this->nrDep != NULL) {
            delete this->nrDep;
        }
    }
	
	//get-eri
	int getAnInfiintare(){
	    return this->anInfiintare;
	}
	string getNume(){
	    return this->nume;
	}
	int getNrAngajati(){
	    return this->nrAngajati;
	}
	float* getNrDep(){
	    return this->nrDep;
	}
	static string getSediu(){
	    return Departament::sediu;
	}
	
	//set-eri
	void setAnInfiintare(int anInfiintare){
	    this->anInfiintare = anInfiintare;
	}
	void setNrAngajati(int nrAngajati){
	    this->nrAngajati = nrAngajati;
	}
	void setNrDep(float* nrDep){
	    this->nrDep = nrDep;
	}
	
	static void setSediu(string sediu){
	    Departament::sediu = sediu;
	}
	
	// functie de afisare 
	void afisare(){
	    cout<<"Departamentul "<<this->nume<<" cu numarul de departament "<<*this->nrDep<<", a fost infiintat in anul "<<this->anInfiintare<<" si are "<<this->nrAngajati<<" angajati."<<endl;
	}
	
	friend string getResponse(int a, int threshold);
};

class Proiect {
private:
    const bool aprobare;
    int durata;
    float cost;
    static string nume;
    int* dataStart = NULL;

public:   
    Proiect():aprobare(false){
        durata = 5;
        cost = 500.4;
        dataStart = new int[3] {1, 1, 2025} ;
    }
    
    Proiect(bool aprobare, int durata, float cost, int* dataStart):aprobare(aprobare){
        this->durata = durata;
        this->cost = cost;
        this->dataStart = new int[3];
        for (int i = 0; i< 3; i++){
            this->dataStart[i] = dataStart[i];
        }
    }
    
    Proiect(bool aprobare, int durata, int* dataStart):aprobare(aprobare){
        this->durata = durata;
        this->cost = 122.22;
        this->dataStart = new int[3];
        for (int i = 0; i< 3; i++){
            this->dataStart[i] = dataStart[i];
        }
    }
    
    // constructor de copiere
	Proiect(const Proiect&p):aprobare(p.aprobare){
	    this->durata = p.durata;
        this->cost = p.cost;
        this->dataStart = new int[3];
        for (int i = 0; i< 3; i++){
            this->dataStart[i] = p.dataStart[i];
        }
	}
    
    const Proiect& operator= (const Proiect&p) {
        if (this != &p) {
            if (this->dataStart != NULL)
                delete[] this->dataStart;
            this->durata = p.durata;
            this->cost = p.cost;
            this->dataStart = new int[3];
            for (int i = 0; i< 3; i++){
                this->dataStart[i] = p.dataStart[i];
            }
        }
        return *this;
    }
    
    string operator> (Proiect&p) {
        return this->durata > p.durata ? "TRUE" : "FALSE";
    }
    
    string operator!= (Proiect&p) {
        bool temp = true;
        for (int i = 0; i< sizeof(this->dataStart); i++){
            temp &= (this->dataStart[i] != p.dataStart[i]);
        }
        return temp ? "TRUE" : "FALSE";     
    }

    string operator<= (Proiect&p) {
        return this->cost <= p.cost ? "TRUE" : "FALSE";
    }
    
    ~Proiect(){
        if (this->dataStart != NULL) {
            delete[] this->dataStart;
        }
    }
    
    void afisare(){
        cout<<"Proiectul care incepe in data de "<<dataStart[0]<<"."<<dataStart[1]<<"."<<dataStart[2]<<", cu durata de "<<this->durata<<" zile si costurile de "<<this->cost<<" lei";
        
        if (this->aprobare) {
            cout<<" a fost aprobat."<<endl;
        } else {
            cout<<" nu a fost aprobat."<<endl;
        }
    }
    
    //get-eri
	bool getAprobare(){
	    return this->aprobare;
	}
	int getDurata(){
	    return this->durata;
	}
	float getCost(){
	    return this->cost;
	}
	int* getData(){
	    return this->dataStart;
	}
	static string getNume(){
	    return Proiect::nume;
	}
	
	//set-eri
	void setDurata(int durata){
	    this->durata = durata;
	}
	void setCost(float cost){
	    this->cost = cost;
	}
	void setData(int* data){
        if (this->dataStart != NULL) {
            delete[]this->dataStart;
        }
	    dataStart = new int[3];
        for (int i = 0; i< 3; i++){
            this->dataStart[i] = data[i];
        }
	}
	static void setNume(string nume){
	    Proiect::nume = nume;
	}
	
	friend string getResponse(int a, int threshold);
};

string getResponse(int a, int threshold){
    return a > threshold ? "CORECT!" : "INCORECT!";
}

int Angajat::zileConcediu = 21; //atribuire element static 
string Departament::sediu = "Cibernetica";
string Proiect::nume = "CodeIsMyLife";

Angajat citireInformatiiAngajat(int i){
    int salariu; string nume; int varsta; char tip;
    cout<<"Introduceti numele angajatului "<<i + 1<<": "; cin>>nume;
    cout<<"Introduceti salariul angajatului "<<nume<<": "; cin>>salariu;
    cout<<"Introduceti varsta angajatului "<<nume<<": "; cin>>varsta;
    cout<<"Introduceti tipul angajatului "<<nume<<": "; cin>>tip;
    return Angajat(salariu, nume, varsta, tip);
}

Departament citireInformatiiDepartament(int i){
    string nume; int anInfiintare; int nrAngajati; float nrDep;
    cout<<"Introduceti numele departamentului "<<i + 1<<": "; cin>>nume;
    cout<<"Introduceti anul de infiintare al departamentului "<<nume<<": "; cin>>anInfiintare;
    cout<<"Introduceti nr de angajati ai departamentului "<<nume<<": "; cin>>nrAngajati;
    cout<<"Introduceti nr departamentului "<<nume<<": "; cin>>nrDep;
    return Departament(nume, anInfiintare, nrAngajati, nrDep);
}

Proiect citireInformatiiProiect(int i){
    string aprobare; int durata; float cost; int* dataStart; int a, b, c;
    cout<<"Introduceti daca proiectul este sau nu aprobat: optiuni valide: true sau false: "; cin>>aprobare;
    cout<<"Introduceti durata proiectului "<<i + 1<<": "; cin>>durata;
    cout<<"Introduceti costul proiectului "<<i + 1<<": "; cin>>cost;
    cout<<"Introduceti data de inceput a proiectului "<<i + 1<<": "<<endl;
    cout<<"Ziua: ";cin>>a;
    cout<<"Luna: ";cin>>b;
    cout<<"Anul: ";cin>>c; 
    dataStart = new int[3] {a, b, c} ;
    bool ap = aprobare == "true";
    return Proiect(ap, durata, cost, dataStart);
}

int main() {
	
	vector<Angajat> angajati;
	vector<Departament> departamente;
	vector<Proiect> proiecte;
	vector<vector<Angajat>> matrice;
	int a, d, p;
	
	cout<<endl<<"Introduceti nr de elemente din vectorul cu angajati: "; cin>>a;
	cout<<a<<endl;
	
	for (int i = 0; i < a; i++){
	    cout<<i<<endl;
	    Angajat ang = citireInformatiiAngajat(i);
	    angajati.push_back(ang);
	}
	
	cout<<endl<<"Introduceti nr de elemente din vectorul cu departemente: "; cin>>d;
	for (int i = 0; i < d; i++){
	    Departament dep = citireInformatiiDepartament(i);
	    departamente.push_back(dep);
	}
	
	cout<<endl<<"Introduceti nr de elemente din vectorul cu proiecte: "; cin>>p;
	for (int i = 0; i < p; i++){
	    Proiect pr = citireInformatiiProiect(i);
	    proiecte.push_back(pr);
	}
	
	for (int i = 0; i < angajati.size(); i++){
	    angajati[i].afisare();
	    cout<<endl;
	}
	
	for (int i = 0; i < departamente.size(); i++){
	    departamente[i].afisare();
	    cout<<endl;
	}
	
	for (int i = 0; i < proiecte.size(); i++){
	    proiecte[i].afisare();
	    cout<<endl;
	}
	
	int j; 
	cout<<"Introduceti nr de randuri din marice: ";cin>>j;
	for (int i = 0; i < j; i++){
	    matrice.push_back(angajati);
	}
	
	for (int i = 0; i< matrice.size(); i++){
	    for(int j = 0; j< angajati.size(); j++){
	        matrice[i][j].afisare();
	    }
	}
	return 0;
}
*/
